name: Build iBoot64Patcher

on:
  workflow_dispatch:

jobs:
  build:

    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, macos-13] #macOS_arm64 macOS_x86_64
    runs-on: ${{ matrix.platform }}
    env:
      BUILDROOT: "buildroot_${{ matrix.platform }}"
      GIT_DEPENDENCIES: tihmstar/libgeneral,tihmstar/libinsn,tihmstar/libplist,tihmstar/img3tool,tihmstar/img4tool,sen0rxol0/libpatchfinder
      MAC_DYNAMIC_LIBS: openssl
    
    steps:
    - uses: actions/checkout@v4
    - name: prepre buildroot
      run: mkdir $BUILDROOT
    - name:  Install pre-dependencies
      run: |
         if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get update
              sudo apt-get install -y libssl-dev libcurl4-openssl-dev libzip-dev
              
              git clone https://github.com/libimobiledevice/libplist
              cd libplist
              ./autogen.sh --without-cython --enable-static --disable-shared CFLAGS="-fPIC" CXXFLAGS="-fPIC"
              make
              sudo make install
              cd ..
              rm -rf libplist

              git clone https://github.com/lzfse/lzfse.git
              make -C lzfse CFLAGS="-fPIC"
              make -C lzfse INSTALL_PREFIX=$GITHUB_WORKSPACE/$BUILDROOT/usr/local install
              sudo make -C lzfse install INSTALL_PREFIX=/usr/local
              rm -rf lzfse

              wget https://github.com/apple-oss-distributions/cctools/archive/refs/tags/cctools-973.0.1.tar.gz -O cctools.tar.gz
              mkdir tmp
              tar -xvzf cctools.tar.gz -C tmp
              mv tmp/cctoo* tmp/cctools
              sed -i 's_#include_//_g' tmp/cctools/include/mach-o/loader.h
              sed -i -e 's=<stdint.h>=\n#include <stdint.h>\ntypedef int integer_t;\ntypedef integer_t cpu_type_t;\ntypedef integer_t cpu_subtype_t;\ntypedef integer_t cpu_threadtype_t;\ntypedef int vm_prot_t;=g' tmp/cctools/include/mach-o/loader.h
              sudo cp -r tmp/cctools/include/* /usr/local/include/
              rm -rf tmp cctools.tar.gz
              
         elif [ "$RUNNER_OS" == "macOS" ]; then
              brew install autoconf automake libtool pkg-config libzip libplist
              brew reinstall openssl
              
              if [ ! -e /usr/local/lib/pkgconfig/openssl.pc ]; then
                cd $(brew --prefix openssl)
                sudo mkdir -p /usr/local/lib/pkgconfig/
                sudo cp -r lib/pkgconfig/* /usr/local/lib/pkgconfig/
                cd $GITHUB_WORKSPACE
              fi
         else
              echo "$RUNNER_OS not supported"
              exit 1
         fi
      shell: bash
    - name: download dependencies
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        mkdir depdir
        cd depdir
        
        IFS=',' read -r -a deparray <<< "$GIT_DEPENDENCIES"; for d in ${deparray[@]}; do        
          echo "Got dependency: $d"
          r=$(echo $d | cut -d '/' -f 2)
          echo "Got reponame: $r"
          git clone "https://github.com/$d.git" "$r"
          cd "$r"
          ./autogen.sh --enable-static --disable-shared
          make
          sudo make install
          cd ../
          rm -rf "$r"
        done
        cd ..
        rm -rf depdir
    - name: autogen
      run: ./autogen.sh --enable-static --disable-shared
    - name: make
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
          IFS=',' read -r -a deparray <<< "$MAC_DYNAMIC_LIBS"; for d in ${deparray[@]}; do        
            echo "moving library $d"
            cd $(brew --prefix $d)
            find . -name "*.dylib" -exec mv {} {}.bak \;
          done       
          cd $GITHUB_WORKSPACE
          
          make
          
          IFS=',' read -r -a deparray <<< "$MAC_DYNAMIC_LIBS"; for d in ${deparray[@]}; do        
            echo "restoring library $d"
            cd $(brew --prefix $d)
          find . -name "*.dylib.bak" | while read f; do o=$(echo $f | rev | cut -d '.' -f2- | rev); mv $f $o; done
          done       
          cd $GITHUB_WORKSPACE
        else
          make
        fi
    - name: make install
      run: make DESTDIR=$GITHUB_WORKSPACE/$BUILDROOT install
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BUILDROOT }}
        path: ${{ env.BUILDROOT }}

  # release:
  #   needs: build
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Download ubuntu artifact
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: buildroot_ubuntu-latest   
  #       path: buildroot_ubuntu-latest    
  #   - name: Download macOS 11+ artifact
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: buildroot_macos-latest
  #       path: buildroot_macos-latest
  #   - name: Download macOS x86_64 artifact
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: buildroot_macOS_x86_64
  #       path: buildroot_macOS_x86_64
  #   - name: Set env vars and zip
  #     run: |
  #       echo "::set-env name=BUILD_VERSION_NUM::$(echo "$(git rev-list --count HEAD | tr -d '\n')")"
  #       echo "::set-env name=BUILD_VERSION_SHA::$(echo "$(git rev-parse HEAD | tr -d '\n'])")"
  #       echo "::set-env name=BUILD_VERSION_STR::$(echo "$(git rev-list --count HEAD | tr -d '\n')-$(git rev-parse HEAD | tr -d '\n'])")"
  #       echo "::set-env name=COMMIT_MSG::$(echo "$(git log -1 --pretty=%B)")"
  #       zip -r buildroot_macos-13.zip buildroot_macos-13
  #       zip -r buildroot_macos-latest.zip buildroot_macos-latest
  #       zip -r buildroot_ubuntu-latest.zip buildroot_ubuntu-latest
  #   - name: Create Release
  #     id: create_release
  #     uses: actions/create-release@v1.0.0
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ env.BUILD_VERSION_NUM }}
  #       release_name: Build ${{ env.BUILD_VERSION_STR }}
  #       body: ${{ env.COMMIT_MSG }}
  #       draft: false
  #       prerelease: false
  #   - name: Upload Release Asset ubuntu
  #     id: upload-release-asset-ubuntu
  #     uses: actions/upload-release-asset@v1.0.1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{ steps.create_release.outputs.upload_url }}
  #       asset_path: buildroot_ubuntu-latest.zip
  #       asset_name: buildroot_ubuntu-latest.zip
  #       asset_content_type: application/zip
  #   - name: Upload Release Asset macos
  #     id: upload-release-asset-macos 
  #     uses: actions/upload-release-asset@v1.0.1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{ steps.create_release.outputs.upload_url }}
  #       asset_path: buildroot_macos-latest.zip
  #       asset_name: buildroot_macos-latest.zip
  #       asset_content_type: application/zip
  
